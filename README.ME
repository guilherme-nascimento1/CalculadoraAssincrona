<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>README - Calculadora Assíncrona</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            color: #333;
            margin: 0;
            padding: 20px;
        }
        h2, h3 {
            color: #1e88e5;
        }
        h2 {
            border-bottom: 2px solid #1e88e5;
            padding-bottom: 5px;
            margin-top: 30px;
        }
        h3 {
            margin-top: 20px;
        }
        p, ul, ol {
            margin-bottom: 20px;
        }
        ul {
            list-style-type: disc;
            margin-left: 20px;
        }
        ol {
            list-style-type: decimal;
            margin-left: 20px;
        }
        pre {
            background-color: #e8f0fe;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
        }
        code {
            background-color: #e8e8e8;
            padding: 2px 5px;
            border-radius: 4px;
        }
        a {
            color: #1e88e5;
        }
        img {
            max-width: 100%;
            margin: 20px 0;
            border: 1px solid #ccc;
            border-radius: 8px;
        }
        .highlight {
            background-color: #e1f5fe;
            padding: 10px;
            border-left: 4px solid #1e88e5;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

<h2>Sobre o Projeto</h2>
<p>Este projeto é uma aplicação de <strong>calculadora assíncrona</strong>. O objetivo é demonstrar um fluxo de processamento assíncrono utilizando o <strong>RabbitMQ</strong> para mensageria, <strong>MongoDB</strong> como banco de dados, e uma arquitetura distribuída que separa as responsabilidades entre os serviços.</p>

<h3>Tecnologias Utilizadas:</h3>
<ul>
    <li><strong>Node.js</strong>: Para construir a API de backend.</li>
    <li><strong>Angular</strong>: Para o desenvolvimento do frontend.</li>
    <li><strong>C#</strong>: Utilizado no Worker para consumir e processar as mensagens da fila do RabbitMQ.</li>
    <li><strong>MongoDB</strong>: Banco de dados NoSQL para armazenar os cálculos.</li>
    <li><strong>RabbitMQ</strong>: Sistema de mensageria para processamento assíncrono.</li>
    <li><strong>Docker</strong>: Utilizado para containerizar os serviços, facilitando o setup e a execução do projeto. (Apenas para MongoDB e RabbitMQ)</li>
</ul>

<h3>Fluxo de Funcionamento:</h3>
<ol>
    <li><strong>Frontend (Angular)</strong>: O usuário interage com o frontend, enviando dois números através de um formulário.</li>
    <li><strong>API (Node.js)</strong>: A API recebe os números, armazena-os no <strong>MongoDB</strong> e envia uma mensagem para o <strong>RabbitMQ</strong>.</li>
    <li><strong>RabbitMQ</strong>: A fila do RabbitMQ gerencia a comunicação entre a API e o Worker.</li>
    <li><strong>Worker (C#)</strong>: O Worker consome a mensagem da fila, processa o cálculo e atualiza o status no <strong>MongoDB</strong>.</li>
    <li><strong>MongoDB</strong>: Armazena o status e resultado final do cálculo.</li>
</ol>

<!-- Adicione a URL da imagem quando disponível -->
<img src="URL_DA_IMAGEM" alt="Fluxo de funcionamento da aplicação">

<h3>Explicação para rodar o projeto</h3>

<div class="highlight">
<p>Segue as instruções para rodar cada parte do projeto.</p>
</div>

<h3>1. Instalação e configuração do Backend (Node.js)</h3>

<h4>Docker</h4>
<p>Estou utilizando o MongoDB e o RabbitMQ no Docker, então é possível rodar o comando <code>docker-compose build</code> para iniciar os containers.</p>

<pre><code>
1. Clone o repositório:
   git clone https://github.com/guilherme-nascimento1/CalculadoraAssincrona.git

2. Acesse a pasta da API:
   cd seu-repositorio/api

3. Instale as dependências:
   npm install

4. Crie o arquivo .env:
   MONGO_URL='mongodb://127.0.0.1:27017/calculator'
   RABBITMQ_URL='amqp://localhost'

5. Compile o TypeScript:
   npm run build

6. Inicie a API:
   npm run start
</code></pre>

<p>A API estará disponível em <a href="http://localhost:3000" target="_blank">http://localhost:3000</a>.</p>

<h3>2. Instalação e configuração do Frontend (Angular)</h3>

<pre><code>
1. Acesse a pasta do Frontend:
   cd ../frontend-angular

2. Instale as dependências:
   npm install

3. Inicie o servidor Angular:
   ng serve
</code></pre>

<p>O frontend estará disponível em <a href="http://localhost:4200" target="_blank">http://localhost:4200</a>.</p>

<h3>3. Instalação e configuração do Worker (C#)</h3>

<pre><code>
1. Acesse a pasta do Worker:
   cd ../worker-csharp

2. Compile o Worker:
   dotnet build

3. Inicie o Worker:
   dotnet run
</code></pre>

<h3>4. Rodando com Docker (opcional)</h3>

<pre><code>
1. Verifique se o Docker está instalado:
   Certifique-se de que você tem o Docker e o Docker Compose instalados na sua máquina.

2. Acesse a raiz do projeto:
   cd seu-repositorio

3. Inicie todos os serviços com Docker Compose:
   docker-compose up --build
</code></pre>

<h3>5. Testando a aplicação</h3>

<p>Agora que você tem todos os serviços rodando, você pode testar a aplicação seguindo o fluxo abaixo:</p>

<ol>
    <li>Acesse o Frontend: Abra o navegador e vá para <a href="http://localhost:4200" target="_blank">http://localhost:4200</a>. Preencha o formulário com dois números e envie o cálculo.</li>
    <li>A API em <strong>Node.js</strong> receberá os números, armazenará no <strong>MongoDB</strong> com status "pending" e enfileirará uma mensagem para o <strong>RabbitMQ</strong>.</li>
    <li>O Worker em <strong>C#</strong> consumirá a mensagem, processará o cálculo (soma dos dois números) e atualizará o resultado no <strong>MongoDB</strong> com o status "done".</li>
    <li>Verifique o resultado no frontend quando o cálculo for processado pelo Worker e o MongoDB for atualizado.</li>
</ol>

<!-- Adicione a URL da imagem quando disponível -->
<img src="URL_DA_IMAGEM_TESTE" alt="Teste da aplicação">

</body>
</html>
